-------------------------------------------------------------------------------
-- Title      : butterfly_dp
-- Project    : 
-------------------------------------------------------------------------------
-- File       : butterfly_dp.vhd
-- Author     : wackoz  <wackoz@wT14s>
-- Company    : 
-- Created    : 2020-12-23
-- Last update: 2020-12-30
-- Platform   : 
-- Standard   : VHDL'93/02
-------------------------------------------------------------------------------
-- Description: Datapath Butterfly
-------------------------------------------------------------------------------
-- Copyright (c) 2020 
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2020-12-23  1.0      wackoz  Created
-------------------------------------------------------------------------------


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-------------------------------------------------------------------------------

entity butterfly_dp is

  port (
    clock  : in  std_logic;
    reset  : in  std_logic;
    Wr     : in  std_logic_vector(19 downto 0);
    Wj     : in  std_logic_vector(19 downto 0);
    Aj_in  : in  std_logic_vector(19 downto 0);
    Ar_in  : in  std_logic_vector(19 downto 0);
    Bj_in  : in  std_logic_vector(19 downto 0);
    Br_in  : in  std_logic_vector(19 downto 0);
    Aj_out : out std_logic_vector(19 downto 0);
    Ar_out : out std_logic_vector(19 downto 0);
    Bj_out : out std_logic_vector(19 downto 0);
    Br_out : out std_logic_vector(19 downto 0);

    -- mux selectors
    s_mux_br    : in std_logic;
    s_mux_bj    : in std_logic;
    s_mux_ar    : in std_logic;
    s_mux_aj    : in std_logic;
    s_mux_B_mpy : in std_logic;
    s_mux_A_mpy : in std_logic_vector(1 downto 0);
    s_mux_B_add : in std_logic_vector(1 downto 0);

    --mpy/add controls

    add_sub : in std_logic;
    sh_mpy  : in std_logic);
end entity butterfly_dp;

-------------------------------------------------------------------------------

architecture str of butterfly_dp is

  -----------------------------------------------------------------------------
  -- Internal signal declaration
  -----------------------------------------------------------------------------

  -- Paralellism
  signal N : integer := 20;

  signal Wr_reg    : std_logic_vector(N-1 downto 0);
  signal Wj_reg    : std_logic_vector(N-1 downto 0);
  signal Br_reg    : std_logic_vector(N-1 downto 0);
  signal Bj_reg    : std_logic_vector(N-1 downto 0);
  signal Ar_reg    : std_logic_vector(N-1 downto 0);
  signal Aj_reg    : std_logic_vector(N-1 downto 0);
  --mpy internal signals
  signal mpy_in_A  : std_logic_vector(N-1 downto 0);
  signal mpy_in_B  : std_logic_vector(N-1 downto 0);
  signal mpy_out   : std_logic_vector(2*N-1 downto 0);
  --add internal signals
  signal add_in_A  : std_logic_vector(2*N-1 downto 0);
  signal add_in_B  : std_logic_vector(2*N-1 downto 0);
  signal add_out   : std_logic_vector(N downto 0);
  --round internal signals
  signal round_in  : std_logic_vector(N-1 downto 0);
  signal round_out : std_logic_vector(N-1 downto 0);

-----------------------------------------------------------------------------
  -- Dichiarazione component
  -----------------------------------------------------------------------------
  component mpy_sh is
    generic (
      N : integer);
    port (
      clock  : in  std_logic;
      reset  : in  std_logic;
      A      : in  std_logic_vector(N-1 downto 0);
      B      : in  std_logic_vector(N-1 downto 0);
      Y      : out std_logic_vector(2*N-1 downto 0);
      sh_mpy : in  std_logic);
  end component mpy_sh;
  
  component adder is
    generic (
      N : integer);
    port (
      clock   : in  std_logic;
      reset   : in  std_logic;
      add_sub : in  std_logic;
      A       : in  std_logic_vector(N-1 downto 0);
      B       : in  std_logic_vector(N-1 downto 0);
      Y       : out std_logic_vector(N downto 0));
  end component adder;
  
  component round_block is
    generic (
      N : integer;
      M : integer);
    port (
      reset : in  std_logic;
      clock : in  std_logic;
      A     : in  std_logic_vector(M-1 downto 0);
      Y     : out std_logic_vector(N-1 downto 0));
  end component round_block;

begin  -- architecture str

  butterfly : process (clock) is
  begin  -- process butterfly
    if clock'event and clock = '1' then  -- rising clock edge
      Wr_reg <= Wr;
      Wj_reg <= Wj;
      --i/o reg mux
      if s_mux_br = '0' then
        Br_reg <= Br_in;
      else
        Br_reg <= round_out;
      end if;

      if s_mux_bj = '0' then
        Bj_reg <= Bj_in;
      else
        Bj_reg <= round_out;
      end if;

      if s_mux_ar = '0' then
        Ar_reg <= Ar_in;
      else
        Ar_reg <= round_out;
      end if;

      if s_mux_aj = '0' then
        Aj_reg <= Aj_in;
      else
        Aj_reg <= round_out;
      end if;

      --mpy mux

      if s_mux_B_mpy = '0' then
        mpy_in_B <= Br_in;
      else
        mpy_in_B <= Bj_in;
      end if;

      case s_mux_A_mpy is
        when "00"   => mpy_in_A <= Wr;
        when "01"   => mpy_in_A <= Wj;
        when "10"   => mpy_in_A <= Ar_in;
        when "11"   => mpy_in_A <= Aj_in;
        when others => null;
      end case;

      case s_mux_B_add is
        when "00"   => add_in_B <= Ar_in;
        when "01"   => add_in_B <= Aj_in;
        when "10"   => add_in_A <= add_out;
        when others => null;

      end case;

    end if;
  end process butterfly;

  -----------------------------------------------------------------------------
  -- Component mapping
  -----------------------------------------------------------------------------


  mpy_sh_1 : mpy_sh
    generic map (
      N => N)
    port map (
      clock => clock,
      reset => reset,
      A      => mpy_in_A,
      B      => mpy_in_B,
      Y      => mpy_out,
      sh_mpy => sh_mpy);

  -- instance "adder_1"
  adder_1 : adder
    generic map (
      N => 2*N+3)
    port map (
      clock => clock,
      reset => reset,
      add_sub => add_sub,
      A       => add_in_A,
      B       => add_in_B,
      Y       => add_out);

  -- instance "round_block_1"
  round_block_1 : round_block
    generic map (
      N => N,
      M => 2*N+4)
    port map (
      reset => reset,
      clock => clock,
      A     => round_in,
      Y     => round_out);

end architecture str;

-------------------------------------------------------------------------------
